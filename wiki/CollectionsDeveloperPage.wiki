#summary Project vision and requirements
#labels Phase-Requirements

= Collections Roadmap =

We use this page to share concepts and ideas on the further development of the AS3Commons Collections Framework.

= Table Of Contents =

<wiki:toc max_depth="3" />

= Milestones / Releases =

==V 1.3==

=== Utility classes for major collection types ===

Provide static utility classes which contain common helper methods which simplify / provide common functionality around their collection interfaces. These classes allow us to add new features without bloating / complicating the core API; examples such as:

{{{
// The following call will result in an ArgumentError being thrown.
var myMap : IMap = new Map();
Maps.itemOrError(myMap, "non-existant-key", "bang!");
}}}

We should provide utility classes for:

 * Maps: Maps.as
 * Lists: Lists.as
 * Sets: Sets.as
 * Collections: Collections.as

=== Provide a simple way to convert from one collection to another ===

Currently there is no easy way to copy all the values from one collection to another; for example, from a List to a Set in order to remove all duplicates.  This could possibly be achieved by using an Collections helper class, with the syntax:

{{{
var myList : IList = new List();
list.add("a");
list.add("b");
list.add("a");

// Transfer the contents of myList into a new Set instance.
var noDupes : ISet = Collections.transfer(myList, new Set()) as ISet;
}}}

=== Provide builders for common collection types ===

Builders simplify the construction of pre-populated collections. A builder offers a fluent interface that finally returns the populated collection, an example of a SetBuilder:

{{{
var mySet : ISet = SetBuilder.buildSet() // start building a specific type
  .add("item-1") // populate
  .add("item-2")
  .build(); // finalize and return
}}}

Builders should be provided for:

 * Map: MapBuilder.as
 * Set: SetBuilder.as
 * List: ListBuilder.as
 * LinkedList: LinkedListBuilder.as

A builder consists of static factories to create builders for a specific collection type such as `MapBuilder.map(), MapBuilder.orderedMap(), MapBuilder.sortedMap()`. Additionally, the builder may be instantiated directly by passing an instance of the collection to build.
The actual implementation returned by a builder is not specified but will be usually one of the implementations provided by the framework.

MapBuilder.as
{{{
static function map() : MapBuilder; // builds an IMap
static function orderedMap() : MapBuilder; // builds an IOrderedMap
static function sortedMap(comparator : IComparator) : MapBuilder; // builds an ISortedMap
function MapBuilder(underlyingMap : IMap); // constructor
function add(key : *, item : *) : MapBuilder; // add single
function addAll(...args) : MapBuilder; // add many
function build() : IMap; // finalize, return map
}}}

SetBuilder.as
{{{
static function set() : SetBuilder; // builds an IMap
static function orderedSet() : SetBuilder; // builds an IOrderedSet
static function sortedSet(comparator : IComparator) : SetBuilder; // builds an ISortedSet
function SetBuilder(underlyingSet : IMap); // constructor
function add(key : *, item : *) : MapBuilder; // add single
function addAll(...args) : MapBuilder; // add many
function build() : IMap; // finalize, return map
}}}

==V 2==
==== forEach Iterator ====
Provide the ability to iterate all Collections using a forEach syntax - this is not as fast as using an iterator but provides a very simple interface for AS3 devs not used to iterators.